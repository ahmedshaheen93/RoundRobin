/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package roundrobin;

import java.awt.Color;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lts
 */
public class ProcessingOverView extends javax.swing.JFrame {

    int firstIteration = 0;

    /**
     * Creates new form ProcessingOverView
     */
    public ProcessingOverView(List<Process> processes, int quantum) {
        initComponents();
        setLocationRelativeTo(null);

        processes.add(new Process(1, 0, 5));
        processes.add(new Process(2, 1, 3));
        processes.add(new Process(3, 2, 1));
        processes.add(new Process(4, 3, 2));
        processes.add(new Process(5, 4, 3));
        RoundRobin roundRobin = new RoundRobin(processes, quantum);
        roundRobin.print();
        processes = roundRobin.getRunningProcess();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        for (Process process : processes) {
            model.addRow(new Object[]{"p" + process.getId(),
                process.getArrivalTime(),
                process.getBrustTime(),
                process.getCompletionTime(),
                process.getTurnarroundTime(),
                process.getWaitingTime(),
                process.getResponseTime()
            });

        }
        jTable1.setModel(model);

        jLabelAverageTurnAround.setText(jLabelAverageTurnAround.getText() + " " + Math.round(roundRobin.getAvgReturn() * 100.0) / 100.0);
        jLabelAverageWaiting.setText(jLabelAverageWaiting.getText() + " " + Math.round(roundRobin.getAvgWait() * 100.0) / 100.0);
        jLabelAverageResponse.setText(jLabelAverageResponse.getText() + " " + Math.round(roundRobin.getAvgResponse() * 100.0) / 100.0);

        roundRobin.getInterruptionList().forEach((interruption) -> {

            JLabel startLable = new JLabel();

            if (firstIteration == 0) {
                startLable = new JLabel("" + interruption.getProcess().getArrivalTime(), SwingConstants.LEFT);
                firstIteration += 1;
            }
            JPanel jPanel = new JPanel(new GridLayout(0, 1, 0, 0));
            JLabel jLabelProcess = new JLabel("p" + interruption.getProcess().getId(), SwingConstants.CENTER);
            jLabelProcess.setOpaque(true);
            jLabelProcess.setBackground(Color.GREEN);
            jLabelProcess.setBorder(BorderFactory.createLineBorder(Color.BLACK, 1));

            JLabel jLabelTime = new JLabel("" + interruption.getTime(), SwingConstants.RIGHT);
            JPanel jPanelTime = new JPanel(new GridLayout(1, 0, 0, 0));
            jPanelTime.add(startLable);
            jPanelTime.add(jLabelTime);
            jPanel.add(jLabelProcess);
            jPanel.add(jPanelTime);
            jPanelRunning.add(jPanel);

        }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabelAverageWaiting = new javax.swing.JLabel();
        jLabelAverageTurnAround = new javax.swing.JLabel();
        jPanelRunning = new javax.swing.JPanel();
        jLabelAverageResponse = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Process id", "Arrival Time", "Burst Time", "Completion Time", "Turnaround Time", "Wating Time", "Response Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabelAverageWaiting.setText("Average waiting time =");

        jLabelAverageTurnAround.setText("Average turn Around time =");

        jPanelRunning.setLayout(new java.awt.GridLayout());

        jLabelAverageResponse.setText("Average Response time =");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                    .addComponent(jPanelRunning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelAverageWaiting)
                            .addComponent(jLabelAverageTurnAround)
                            .addComponent(jLabelAverageResponse))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jLabelAverageTurnAround)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAverageWaiting)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAverageResponse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addComponent(jPanelRunning, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProcessingOverView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProcessingOverView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProcessingOverView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProcessingOverView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProcessingOverView(new ArrayList<>(), 2).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAverageResponse;
    private javax.swing.JLabel jLabelAverageTurnAround;
    private javax.swing.JLabel jLabelAverageWaiting;
    private javax.swing.JPanel jPanelRunning;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
